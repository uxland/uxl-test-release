{
  "stats": {
    "suites": 5,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2018-08-01T07:33:08.443Z",
    "end": "2018-08-01T07:33:08.463Z",
    "duration": 20,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "55f97589-4485-48df-bdfd-59ceb4ddd8fd",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "96de00f5-4273-4f33-89b8-9c47b028cc90",
        "title": "constant builder fixture",
        "fullFile": "/Users/alexvizcaino/Documents/uxland/libs/uxl-test-release/test/unit/constant-builder-fixture.js",
        "file": "/test/unit/constant-builder-fixture.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "build",
            "fullTitle": "constant builder fixture build",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(constantBuilder('pre', 'suf', '-')('constant'), 'pre-constant-suf');\nassert.equal(constantBuilder('pre2', 'suf2', '-')('constant2'), 'pre2-constant2-suf2');",
            "err": {},
            "isRoot": false,
            "uuid": "dfd0aebd-58a2-47ba-823a-bfce5ee5a82c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "use : as default separator",
            "fullTitle": "constant builder fixture use : as default separator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(constantBuilder('pre', 'suf')('constant'), 'pre:constant:suf');\nassert.equal(constantBuilder('pre2', 'suf2')('constant2'), 'pre2:constant2:suf2');",
            "err": {},
            "isRoot": false,
            "uuid": "06f0c796-2627-4f1c-8fc8-106905d3840e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not supplied suffix skips last separator",
            "fullTitle": "constant builder fixture not supplied suffix skips last separator",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(constantBuilder('pre')('constant'), 'pre:constant');\nassert.equal(constantBuilder('pre2')('constant2'), 'pre2:constant2');",
            "err": {},
            "isRoot": false,
            "uuid": "650f09c2-5ff5-4685-ac40-217b1eccb956",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "dfd0aebd-58a2-47ba-823a-bfce5ee5a82c",
          "06f0c796-2627-4f1c-8fc8-106905d3840e",
          "650f09c2-5ff5-4685-ac40-217b1eccb956"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5d2c2fa3-c92e-4871-8ded-71de6ab3665b",
        "title": "when invoking `invariant` method",
        "fullFile": "/Users/alexvizcaino/Documents/uxland/libs/uxl-test-release/test/unit/invariant-fixture.js",
        "file": "/test/unit/invariant-fixture.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6676a19d-407f-40c0-9532-0d14d3e4139b",
            "title": "and a value is passed as first argument",
            "fullFile": "/Users/alexvizcaino/Documents/uxland/libs/uxl-test-release/test/unit/invariant-fixture.js",
            "file": "/test/unit/invariant-fixture.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return undefined if first argument is truthy",
                "fullTitle": "when invoking `invariant` method and a value is passed as first argument should return undefined if first argument is truthy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.isUndefined(invariant(true));\nassert.isUndefined(invariant(1));\nassert.isUndefined(invariant({}));",
                "err": {},
                "isRoot": false,
                "uuid": "d6b79379-160a-484f-8386-4427e272985c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should raise exception if first argument is falsy",
                "fullTitle": "when invoking `invariant` method and a value is passed as first argument should raise exception if first argument is falsy",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.throws(() => invariant(false));\nassert.throws(() => invariant(0));\nassert.throws(() => invariant(''));\nassert.throws(() => invariant(null));\nassert.throws(() => invariant(undefined));\nassert.throws(() => invariant(NaN));",
                "err": {},
                "isRoot": false,
                "uuid": "fc004d70-1b8b-4023-af1a-1b220d11ff00",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set exception message if first argument is false if second argument is supplied",
                "fullTitle": "when invoking `invariant` method and a value is passed as first argument should set exception message if first argument is false if second argument is supplied",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(() => invariant(false, 'condition false')).to.throw(Error).that.has.property('message').eq('condition false');\nexpect(() => invariant(0, 'condition 0')).to.throw(Error).that.has.property('message').eq('condition 0');\nexpect(() => invariant('', 'condition empty string')).to.throw(Error).that.has.property('message').eq('condition empty string');\nexpect(() => invariant(null, 'condition null')).to.throw(Error).that.has.property('message').eq('condition null');\nexpect(() => invariant(undefined, 'condition undefined')).to.throw(Error).that.has.property('message').eq('condition undefined');\nexpect(() => invariant(NaN, 'condition NaN')).to.throw(Error).that.has.property('message').eq('condition NaN');",
                "err": {},
                "isRoot": false,
                "uuid": "981723bb-25fa-4d5f-af39-6f1ece1b8191",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6b79379-160a-484f-8386-4427e272985c",
              "fc004d70-1b8b-4023-af1a-1b220d11ff00",
              "981723bb-25fa-4d5f-af39-6f1ece1b8191"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b6aacf8b-3630-42da-b4f7-a055e0a2d891",
            "title": "and a function is passed as first argument",
            "fullFile": "/Users/alexvizcaino/Documents/uxland/libs/uxl-test-release/test/unit/invariant-fixture.js",
            "file": "/test/unit/invariant-fixture.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should invoke function",
                "fullTitle": "when invoking `invariant` method and a function is passed as first argument should invoke function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let stub = sinon.stub();\ntry {\n    invariant(stub);\n}\ncatch (e) {\n}\nassert.isTrue(stub.calledOnceWith());",
                "err": {},
                "isRoot": false,
                "uuid": "cfae706c-f285-435b-a76c-b728659a97d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should raise error if function returns falsy",
                "fullTitle": "when invoking `invariant` method and a function is passed as first argument should raise error if function returns falsy",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let stub = sinon.stub().onFirstCall().returns(false).onSecondCall().returns(0).onThirdCall().returns('')\n    .onCall(4).returns(null).onCall(5).returns(undefined).onCall(6).returns(NaN);\nassert.throws(() => invariant(stub));\nassert.throws(() => invariant(stub));\nassert.throws(() => invariant(stub));\nassert.throws(() => invariant(stub));\nassert.throws(() => invariant(stub));\nassert.throws(() => invariant(stub));\nassert.equal(stub.callCount, 6);",
                "err": {},
                "isRoot": false,
                "uuid": "07cab49b-5857-4479-bce2-d6c60d234454",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set exception message if function returns falsy and a second parameter is supplied",
                "fullTitle": "when invoking `invariant` method and a function is passed as first argument should set exception message if function returns falsy and a second parameter is supplied",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(() => invariant(() => false, 'condition false')).to.throw(Error).that.has.property('message').eq('condition false');\nexpect(() => invariant(() => 0, 'condition 0')).to.throw(Error).that.has.property('message').eq('condition 0');\nexpect(() => invariant(() => '', 'condition empty string')).to.throw(Error).that.has.property('message').eq('condition empty string');\nexpect(() => invariant(() => null, 'condition null')).to.throw(Error).that.has.property('message').eq('condition null');\nexpect(() => invariant(() => undefined, 'condition undefined')).to.throw(Error).that.has.property('message').eq('condition undefined');\nexpect(() => invariant(() => NaN, 'condition NaN')).to.throw(Error).that.has.property('message').eq('condition NaN');",
                "err": {},
                "isRoot": false,
                "uuid": "49181e69-88e5-4eda-b6a8-f88b1078166b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined is function returns truthy",
                "fullTitle": "when invoking `invariant` method and a function is passed as first argument should return undefined is function returns truthy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const obj = {};\nconst func = function () { };\nassert.isUndefined(invariant(() => true));\nassert.isUndefined(invariant(() => 1));\nassert.isUndefined(invariant(() => 'a'));\nassert.isUndefined(invariant(() => obj));\nassert.isUndefined(invariant(() => []));\nassert.isUndefined(invariant(() => func));",
                "err": {},
                "isRoot": false,
                "uuid": "061b5bb4-51f6-430b-98de-f1970d8f7c1c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cfae706c-f285-435b-a76c-b728659a97d7",
              "07cab49b-5857-4479-bce2-d6c60d234454",
              "49181e69-88e5-4eda-b6a8-f88b1078166b",
              "061b5bb4-51f6-430b-98de-f1970d8f7c1c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "89a2a261-f399-4017-a12d-83743c6b0546",
        "title": "spec fixture",
        "fullFile": "/Users/alexvizcaino/Documents/uxland/libs/uxl-test-release/test/unit/spec-fixture.js",
        "file": "/test/unit/spec-fixture.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "spec test",
            "fullTitle": "spec fixture spec test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let stub = sinon.stub().onFirstCall().returns(true).onSecondCall().returns(false);\nlet mySpec = spec(stub);\nlet result = mySpec(2);\nassert.isTrue(result);\nassert.isTrue(stub.calledOnce);\nresult = mySpec(3);\nassert.isFalse(result);\nassert.isTrue(stub.calledTwice);",
            "err": {},
            "isRoot": false,
            "uuid": "194f2be8-e0d8-4f79-bea5-5a0d8fb6ea39",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter test",
            "fullTitle": "spec fixture filter test",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const array = [];\nfor (let i = 0; i <= 20; i++)\n    array.push(i);\nconst predicate = (t) => t % 2 === 0;\nlet mySpec = spec(predicate);\nlet filtered = array.filter(mySpec);\nconst expected = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nassert.deepEqual(filtered, expected);",
            "err": {},
            "isRoot": false,
            "uuid": "fb8cfd81-a801-4422-be9d-a277ecbda404",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "not test",
            "fullTitle": "spec fixture not test",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let item1 = { myProperty: 1 };\nconst sp = spec(x => true);\nassert.exists(sp.not);\nconst notSp = sp.not();\nassert.isTrue(sp(item1));\nassert.isFalse(notSp(item1));",
            "err": {},
            "isRoot": false,
            "uuid": "7c2193eb-8e57-49b7-bb8e-15f87093a8bc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "or test",
            "fullTitle": "spec fixture or test",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let item1 = { p1: 10, p2: 15 };\nlet item2 = { p1: 11, p2: 17 };\nlet item3 = { p1: 5, p2: 34 };\nconst sp1 = spec(x => x.p1 === 10);\nconst sp2 = spec(x => x.p2 === 17);\nconst orSpec = sp1.or(sp2);\nassert.exists(sp1.or);\nassert.isTrue(orSpec(item1));\nassert.isTrue(orSpec(item2));\nassert.isFalse(orSpec(item3));",
            "err": {},
            "isRoot": false,
            "uuid": "a1a52ad1-a373-4b6a-b63f-0eff19698857",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "or test is commutative",
            "fullTitle": "spec fixture or test is commutative",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let item1 = { p1: 10, p2: 15 };\nlet item2 = { p1: 11, p2: 17 };\nlet item3 = { p1: 5, p2: 34 };\nconst sp1 = spec(x => x.p1 === 10);\nconst sp2 = spec(x => x.p2 === 17);\nlet orSpec = sp1.or(sp2);\nassert.isTrue(orSpec(item1));\nassert.isTrue(orSpec(item2));\nassert.isFalse(orSpec(item3));\norSpec = sp2.or(sp1);\nassert.isTrue(orSpec(item1));\nassert.isTrue(orSpec(item2));\nassert.isFalse(orSpec(item3));",
            "err": {},
            "isRoot": false,
            "uuid": "90243f95-dacd-4295-85d6-331fba8c8e48",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "and test",
            "fullTitle": "spec fixture and test",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let item1 = { p1: 10, p2: 15 };\nlet item2 = { p1: 11, p2: 17 };\nlet item3 = { p1: 5, p2: 34 };\nconst sp1 = spec(x => x.p1 === 10);\nassert.exists(sp1.and);\nconst sp2 = spec(x => x.p2 === 15);\nlet andSpec = sp1.and(sp2);\nassert.isTrue(andSpec(item1));\nassert.isFalse(andSpec(item2));\nassert.isFalse(andSpec(item3));\nandSpec = sp2.or(sp1);\nassert.isTrue(andSpec(item1));\nassert.isFalse(andSpec(item2));\nassert.isFalse(andSpec(item3));",
            "err": {},
            "isRoot": false,
            "uuid": "0feedda7-81e0-4c87-b4a8-cbd5b4afdf6b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "miscellaneous",
            "fullTitle": "spec fixture miscellaneous",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const item1 = { p1: 10, p2: 20 };\nconst item2 = { p1: 20, p2: 30 };\nconst item3 = { p1: 50, p2: 40 };\nconst spec1 = spec(i => i.p1 >= 20);\nconst spec2 = spec1.not();\nconst spec3 = spec(i => i.p2 > 30);\nconst spec4 = spec1.not();\nconst spec5 = spec2.and(spec4);\nassert.isTrue(spec5(item1));\nassert.isFalse(spec5(item2));\nassert.isFalse(spec5(item3));",
            "err": {},
            "isRoot": false,
            "uuid": "0cac3ab3-6b95-492f-8f0d-376c488f9348",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "194f2be8-e0d8-4f79-bea5-5a0d8fb6ea39",
          "fb8cfd81-a801-4422-be9d-a277ecbda404",
          "7c2193eb-8e57-49b7-bb8e-15f87093a8bc",
          "a1a52ad1-a373-4b6a-b63f-0eff19698857",
          "90243f95-dacd-4295-85d6-331fba8c8e48",
          "0feedda7-81e0-4c87-b4a8-cbd5b4afdf6b",
          "0cac3ab3-6b95-492f-8f0d-376c488f9348"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}